snippet n "NULL" w
NULL
endsnippet

snippet i "inclue" b
#include <${1:stdio}.h>
endsnippet

snippet ii "cpp inclue" b
#include <${1:iostream}>
endsnippet

snippet rn "return NULL" b
return NULL;
endsnippet

snippet a "assert()" b
assert($1);
endsnippet

snippet uu "unused" b
#define UNUSED(V) ((void) V)
endsnippet

snippet UU "UNUSED" b
UNUSED(${1:argc});
endsnippet

snippet c "const" w
const
endsnippet

snippet s "static" b
static
endsnippet

snippet cls "class" b
namespace $1 {

class $2 {
 public:
  $3

 private:
  $4
};

} // namespace $1
endsnippet

snippet ind "ifndefine" b
#ifndef $1_H_
#define $1_H_

$2

#endif // $1_H_
endsnippet

snippet testh "test helper" b
#ifdef TEST
#include <stdio.h>

#define TEST(what) printf(what);
#define assert(_e) ((_e)?(void)0:(_assert(#_e, __FILE__,__LINE__),exit(1)))

void ok() {
	printf("OK\n");
}

static void _assert(char *estr, char *file, int line) {
	printf("\n\n=== ASSERTION FAILED ===\n");
	printf("--> %s:%d '%s' is not true!\n", file, line, estr);
}

void ${1:what}Test(void)
{
	$2
}

#endif
endsnippet

snippet testa "test a ..." b
TEST("$1: ") {
	$2
	ok();
}
endsnippet
