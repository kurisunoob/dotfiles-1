snippet # "conding" b
# -*- coding: utf-8 -*-
endsnippet


snippet p "print()" b
${0}print(${1})
endsnippet

snippet ifm "if name = main" b
if __name__ == '__main__':
	$0
endsnippet

snippet testh "test helper" b
def test(got, expected):
	if got == expected:
		prefix = ' OK '
	else:
		prefix = '  X '
	print('{} got: {} expected: {}'.format(prefix, repr(got), repr(expected)))
endsnippet


snippet f "False" w
False
endsnippet


snippet t "True" w
True
endsnippet


snippet r "return" b
return $0
endsnippet


snippet wt "while true" b
while True:
	$0
endsnippet


snippet d "short doc string" b
"""$1."""
endsnippet


snippet td "todo" b
# TODO: $0
endsnippet


snippet n "none" w
None
endsnippet


snippet main "if main" b
if __name__ == '__main__':
	${1:main()}
endsnippet


###################
#  magic methods  #
###################

snippet init "__init__" b
def __init__(self, ${1}):
	${2:pass}
endsnippet


snippet repr "__repr__" b
def __repr__(self):
	$0
endsnippet


snippet str "__str__" b
def __str__(self):
	$0
endsnippet


###########
#  Flask  #
###########

snippet tn "table name" b
__tablename__ = '${1:name}'
endsnippet

snippet rr "redirect(url_for)" b
return redirect(url_for('$1'))
endsnippet

snippet rt "render_template()" b
return render_template('$1', ${2})
endsnippet

snippet id "db id" b
id = db.Column(db.Integer, primary_key=True)
endsnippet

snippet dbint "db Integer" w
db.Column(db.Integer, $1)
endsnippet

snippet dbstr "db String" w
db.Column(db.String($1), $2)
endsnippet

snippet dbtext "db Text" w
db.Column(db.Text)
endsnippet

snippet dbool "db Boolean" w
db.Column(db.Boolean, $1)
endsnippet

snippet dbtime "db DateTime" w
db.Column(db.DateTime, default=datetime.utcnow())
endsnippet

snippet dbrel "db relationship" w
db.relationship('$1', backref='$2', lazy='${3:dynamic}')
endsnippet

snippet dbfk "db ForeignKey" w
db.ForeignKey('$1')
endsnippet

snippet csrf "csrf token" b
{{ form.csrf_token }}
endsnippet

snippet mgp "get post" w
methods=['GET', 'POST']
endsnippet

##############
#  patterns  #
##############

snippet subject "observer pattern" b
class Subject(object):

	def __init__(self):
		self._observers = []

	def attach(self, observer):
		if observer not in self._observers:
			self._observers.append(observer)

	def detach(self, observer):
		try:
			self._observers.remove(observer)
		except:
			pass

	def notify(self, modifier=None):
		for observer in self._observers:
			if observer != modifier:
				observer.update(self)

$0
endsnippet
